[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_event = ['InsertCharPre']
hook_post_source = '''
  " Plugin key-mappings.
  " Note: It must be "imap" and "smap".  It uses <Plug> mappings.
  imap <C-k>     <Plug>(neosnippet_expand_or_jump)
  smap <C-k>     <Plug>(neosnippet_expand_or_jump)
  xmap <C-k>     <Plug>(neosnippet_expand_target)

  " SuperTab like snippets behavior.
  " Note: It must be "imap" and "smap".  It uses <Plug> mappings.
  "imap <expr><TAB>
  " \ pumvisible() ? "\<C-n>" :
  " \ neosnippet#expandable_or_jumpable() ?
  " \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
  smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
  \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

  " For conceal markers.
  if has('conceal')
    set conceallevel=2 concealcursor=niv
  endif
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'Shougo/denite.nvim'
on_event = ['VimEnter']
hook_post_source = '''
  nnoremap <Leader>f :Denite file_rec <CR>

	" Change mappings.
	call denite#custom#map(
	      \ 'insert',
	      \ '<C-j>',
	      \ '<denite:move_to_next_line>',
	      \ 'noremap'
	      \)
	call denite#custom#map(
	      \ 'insert',
	      \ '<C-k>',
	      \ '<denite:move_to_previous_line>',
	      \ 'noremap'
	      \)
'''

[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_event = ['InsertCharPre']
depends = ['nvim-yarp', 'vim-hug-neovim-rpc']
hook_add = '''
  " Use deoplete
  let g:deoplete#enable_at_startup = 1
  " Use smartcase.
	let g:deoplete#enable_smart_case = 1

	" <C-h>, <BS>: close popup and delete backword char.
	inoremap <expr><C-h> deoplete#smart_close_popup()."\<C-h>"
	inoremap <expr><BS>  deoplete#smart_close_popup()."\<C-h>"

	" <CR>: close popup and save indent.
	inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
	function! s:my_cr_function() abort
	  return deoplete#close_popup() . "\<CR>"
	endfunction
'''

[[plugins]]
repo = 'roxma/nvim-yarp'
if = ''' !has('nvim') '''

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'
if = ''' !has('nvim') '''

[[plugins]]
repo = 'thinca/vim-quickrun'
on_event = ['VimEnter']
hook_add = '''
  if !exists('g:quickrun_config')
    let g:quickrun_config = {}
  endif

  let g:quickrun_config['cpp'] = {
    \   'command' : 'g++',
    \   'cmdopt' : '-O2 -std=c++14'
    \ }
  " \   'input' : 'input.txt',

  let g:quickrun_config['gnuplot'] = {
    \   'command' : 'gnuplot5',
    \   'cmdopt' : '-p -c',
    \   'outputter' : 'error',
    \   'outputter/error/error' : 'buffer'
    \ }

  let g:quickrun_config['python'] = {
    \   'command' : 'python3'
    \ }

  let g:quickrun_config['tex'] = {
    \   'command' : 'latexmk',
    \   'outputter' : 'error',
    \   'outputter/error/error' : 'buffer',
    \   'outputter/buffer/split' : '',
    \   'cmdopt': '-shell-escape',
    \   'exec': ['%c %o %s'] 
    \ }
'''

[[plugins]]
repo = 'vim-syntastic/syntastic'
on_event = ['BufWritePost']
hook_post_source = '''
  set statusline+=%#warningmsg#
  set statusline+=%{SyntasticStatuslineFlag()}
  set statusline+=%*

  let g:syntastic_always_populate_loc_list = 1
  let g:syntastic_auto_loc_list = 1
  let g:syntastic_check_on_open = 1
  let g:syntastic_check_on_wq = 0

  let g:syntastic_cpp_compiler = 'g++'
  let g:syntastic_cpp_compiler_options = '-std=c++14 -Wall'
  let g:syntastic_css_checkers = ['csslint']
  let g:syntastic_haskell_checkers = ['hlint']
  let g:syntastic_html_checkers = ['htmlhint']
  let g:syntastic_javascript_checkers = ['eslint']
  let g:syntastic_python_checkers = ['flake8']
  let g:syntastic_tex_checkers = ['lacheck']
  let g:syntastic_vim_checkers = ['vimlint']
'''

# required plugin for vimlint
[[plugins]]
repo = 'vim-jp/vim-vimlparser'
on_ft = ['vim']

# required plugin for vimlint
[[plugins]]
repo = 'syngan/vim-vimlint'
depends = ['vim-vimlparser']
on_ft = ['vim']

[[plugins]]
repo = 'tyru/caw.vim'
on_event = ['VimEnter']
hook_post_source = '''
  " \cで行の先頭にコメントをつけたり外したりできる
  " http://ichyo.jp/posts/2014-03-14-how-to-comment-out-with-vim/
  nmap <Leader>c <Plug>(caw:hatpos:toggle)
  vmap <Leader>c <Plug>(caw:hatpos:toggle)
'''

[[plugins]]
repo = 'kannokanno/previm'
on_event = ['VimEnter']
hook_add = '''
	let g:previm_open_cmd = 'google-chrome'

  augroup PrevimSettings
      autocmd!
      autocmd BufNewFile,BufRead *.{md,mdwn,mkd,mkdn,mark*} set filetype=markdown
  augroup END
'''

[[plugins]]
repo = 'haya14busa/vim-asterisk'
on_event = ['VimEnter']
hook_post_source = '''
  map *   <Plug>(asterisk-*)
  map #   <Plug>(asterisk-#)
  map g*  <Plug>(asterisk-g*)
  map g#  <Plug>(asterisk-g#)
  map z*  <Plug>(asterisk-z*)
  map gz* <Plug>(asterisk-gz*)
  map z#  <Plug>(asterisk-z#)
  map gz# <Plug>(asterisk-gz#)

  " To enable keepCursor feature
  " let g:asterisk#keeppos = 1
'''

[[plugins]]
repo = 'haya14busa/vim-migemo'

[[plugins]]
repo = 'cohama/lexima.vim'
on_event = ['InsertEnter']


# You can specify revision/branch/tag.
# repo = 'Shougo/vimshell'
# rev = '3787e5'
